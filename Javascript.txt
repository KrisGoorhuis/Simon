// For button layout logic, think clock, not book. Can't remember why it ended up this way.

// Set counter after each added
// Figure out sounds.

$(document).ready(function() {

   var sequence = []; // We'll add a random color each turn.
   var strict = false; // How many extra chances does the player get?
   var presses = 0;
   var readyForPlayer = true;
   var tries;

   var greenTone = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound1.mp3");
   var redTone = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound2.mp3");
   var yellowTone = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound3.mp3");
   var blueTone = new Audio("https://s3.amazonaws.com/freecodecamp/simonSound4.mp3");

   function playGreenTone() { // This lets us start a sound over if someone is quickly pressing a button. Just greenTone.play() won't play again before it finishes.
      if (greenTone.paused) {
         greenTone.play();
      } else {
         greenTone.currentTime = 0; // Sound's playing when we reach here whether first press or second in quick succession. It's like pulling the scrubber to the start.
      }
   }

   function playRedTone() {
      if (redTone.paused) {
         redTone.play();
      } else {
         redTone.currentTime = 0;
      }
   }

   function playYellowTone() {
      if (yellowTone.paused) {
         yellowTone.play();
      } else {
         yellowTone.currentTime = 0;
      }
   }

   function playBlueTone() {
      if (blueTone.paused) {
         blueTone.play();
      } else {
         blueTone.currentTime = 0;
      }
   }

   function readyForPlayerFunction() {
      readyForPlayer = true;
      $(".greenButton").addClass("greenButtonActive");
      $(".redButton").addClass("redButtonActive");
      $(".blueButton").addClass("blueButtonActive");
      $(".yellowButton").addClass("yellowButtonActive");
   }

   function notReadyForPlayerFunction() {
      readyForPlayer = false;
      $(".greenButton").removeClass("greenButtonActive");
      $(".redButton").removeClass("redButtonActive");
      $(".blueButton").removeClass("blueButtonActive");
      $(".yellowButton").removeClass("yellowButtonActive");
   }

   function enableAllButtonLights() {
      $(".greenButton").addClass("greenButtonLit");
      $(".redButton").addClass("redButtonLit");
      $(".blueButton").addClass("blueButtonLit");
      $(".yellowButton").addClass("yellowButtonLit");
   }
   
   function disableAllButtonLights() {
      $(".greenButton").removeClass("greenButtonLit");
      $(".redButton").removeClass("redButtonLit");
      $(".blueButton").removeClass("blueButtonLit");
      $(".yellowButton").removeClass("yellowButtonLit");
   }
   
   function getCount(n) { // Makes the counter always two digits.
      if (n <= 9) {
         $("#counterDisplay").text("0" + n);
      } else {
         $("#counterDisplay").text(n);
      }
   }

   function addNextColor() { // Filling our current sequence array with words instead of numbers. Superfluous, but pleasant for me.
      var colors = ["green", "red", "blue", "yellow"];
      var x = Math.floor(Math.random() * 4) // set to 4
      sequence.push(colors[x]);
      console.log("The sequence of colors is " + sequence)
      getCount(sequence.length);

   }

   
   
   function showSequence() { // This does not add the next in sequence so we can play the last sequence back if the player messes up (on non-strict mode) 
      i = 0;
      presses = 0;

      function thisSequence() {
         setTimeout(function() { // Setting the pace for playback.
            if (sequence[i] == "green") {
               $(".greenButton").addClass("greenButtonLit"); // Making a button light up.
               playGreenTone();
            }
            if (sequence[i] == "red") {
               $(".redButton").addClass("redButtonLit");
               playRedTone();
            }
            if (sequence[i] == "blue") {
               $(".blueButton").addClass("blueButtonLit");
               playBlueTone();
            }
            if (sequence[i] == "yellow") {
               $(".yellowButton").addClass("yellowButtonLit");
               playYellowTone();
            }

            setTimeout(function() { // Leave the lit color for a bit before resetting original unlit colors.
                  disableAllButtonLights();
               }, 500) // Duration of lightup

            i++;
            if (i < sequence.length) {
               thisSequence();
            }
            if (i == sequence.length) {
               readyForPlayerFunction();
            }

         }, 700); // Duration of pause before/between lightups.
      } // Close thisSequence
      thisSequence();
      //console.log(presses);
   }

   function mistakeMade() {
      notReadyForPlayerFunction();
      console.log(tries);
      if (tries == 1) { // Strict or your second try is up. Game over. Hit reset. If you have a second chance, it's checked for at the end of this cascade.
         $("#counterDisplay").text("XX");
         console.log("Game Over. Tries: " + tries) 
      }
      
      
      function firstFlash() { 
         setTimeout(function() {
            enableAllButtonLights();
            pauseBetween();
         }, 500)
      }
      function pauseBetween() {
         setTimeout(function() {
            disableAllButtonLights();
            secondFlash();
         }, 500)
      }   
      function secondFlash() {
         setTimeout(function() {
            enableAllButtonLights();
            finalOff();
         }, 500)
      }
      function finalOff() {
         setTimeout(function() {
            disableAllButtonLights();
            if (tries == 2) {
               tries--;
               showSequence();
            }
         }, 500)
      }      
      firstFlash();
   }

   

   $(".greenButton").on("click", function() {
      if (readyForPlayer == true && sequence.length < 1) { // Toy hasn't started, just letting the player play around on the buttons.
         playGreenTone();
      }
      if (readyForPlayer == true && sequence.length >= 1) { // Has the toy finished playing the sequence and a game started?
         if (sequence[presses] != "green") {
            if (tries == 1) { // Should be game over.
               mistakeMade();
               //console.log("green, tries = 1, sequence[presses] = " + sequence[presses]);
               return;
            }
            if (tries == 2) { // Should be one more try.      
               //console.log("green, tries = 2, sequence[presses] = " + sequence[presses] + ", presses = " + presses)
               mistakeMade();
               return; // This might come out. Just this one.
            }
         }
         if (sequence[presses] == "green" && presses == sequence.length - 1) { // Should be correctly completing the sequence.
            presses = 0;
            playGreenTone();
            addNextColor();
            showSequence();
            return;
         }
         if (sequence[presses] == "green" && presses < sequence.length - 1) { // Should be a correct press but not the end of a sequence.
            presses++;
            playGreenTone();
            //console.log("presses++");
            return;
         }

      }
   })

   $(".redButton").on("click", function() {
      if (readyForPlayer == true && sequence.length < 1) {
         playRedTone();
      }
      if (readyForPlayer == true && sequence.length >= 1) {
         if (sequence[presses] != "red") {
            if (tries == 1) {
               mistakeMade();
               //console.log("red, tries = 1, sequence[presses] = " + sequence[presses]);
               return;
            }
            if (tries == 2) {               
               //console.log("red, tries = 2, sequence[presses] = " + sequence[presses] + ", presses = " + presses);
               mistakeMade();
               return;
            }
         }
         if (sequence[presses] == "red" && presses == sequence.length - 1) {
            presses = 0;
            playRedTone();
            addNextColor();
            showSequence();
            return;
         }
         if (sequence[presses] == "red" && presses < sequence.length - 1) {
            presses++;
            //console.log("presses++");
            playRedTone();
            return;
         }

      }
   })

   $(".blueButton").on("click", function() {
      if (readyForPlayer == true && sequence.length < 1) {
         playBlueTone();
      }
      if (readyForPlayer == true && sequence.length >= 1) {
         if (sequence[presses] != "blue") {
            if (tries == 1) {
               mistakeMade();
               //console.log("blue, tries = 1, sequence[presses] = " + sequence[presses]);
               return;
            }
            if (tries == 2) {
               //console.log("blue, tries = 2, sequence[presses] = " + sequence[presses] + ", presses = " + presses)
               mistakeMade();
               return;
            }
         }
         if (sequence[presses] == "blue" && presses == sequence.length - 1) {
            presses = 0;
            playBlueTone();
            addNextColor();
            showSequence();
            return;
         }
         if (sequence[presses] == "blue" && presses < sequence.length - 1) {
            presses++;
            playBlueTone();
            //console.log("presses++");
            return;
         }

      }
   })

   $(".yellowButton").on("click", function() {
      if (readyForPlayer == true && sequence.length < 1) {
         playYellowTone();
      }
      if (readyForPlayer == true && sequence.length >= 1) {
         if (sequence[presses] != "yellow") {
            if (tries == 1) {
               mistakeMade();
               //console.log("yellow, tries = 1, sequence[presses] = " + sequence[presses]);
               return;
            }
            if (tries == 2) {
               //console.log("yellow, tries = 2, sequence[presses] = " + sequence[presses] + ", presses = " + presses)
               mistakeMade();
               return;
            }
         }
         if (sequence[presses] == "yellow" && presses == sequence.length - 1) {
            presses = 0;
            playYellowTone();
            addNextColor();
            showSequence();
            return;
         }
         if (sequence[presses] == "yellow" && presses < sequence.length - 1) {
            presses++;
            playYellowTone();
            //console.log("presses++");
            return;
         }

      }
   })

   $("#startButton").on("click", function() {
      //console.log("presses = " + presses + " ");
      if (sequence.length > 0) {
         //console.log("mashing");
      }
      if (sequence.length === 0) {
         notReadyForPlayerFunction();
         addNextColor();
         showSequence();
         getCount(sequence.length);
      }
      if (strict == true) {
         tries = 1;
         //console.log("I set tries to 1 because strict was " + strict);
      }
      if (strict == false) {
         tries = 2;
         //console.log("I set tries to 2 because strict was " + strict)
      }
      //console.log("tries:" + tries + " strict:" + strict);
   })

   $("#resetButton").on("click", function() { // Set everything to the default immediately.
      seriesCount = 0;
      getCount(seriesCount);
      sequence = [];
      disableAllButtonLights();
      readyForPlayerFunction();

   })

   $("#strictButton").on("click", function() {

      if (strict == false) {
         strict = true;
         //console.log(strict);
         $("#strictButton").css("background-color", "red");
         return;
      }
      if (strict == true) {
         strict = false;
         //console.log(strict);
         $("#strictButton").css("background-color", "");
      }

   })

})